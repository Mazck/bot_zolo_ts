import { CommandParams } from '../types';
import { SUBSCRIPTION_PACKAGES, PackageType, UserPermission } from '../config';
import { paymentService, groupService } from '../database/services';
import { formatRentMenu, formatPackageInfo } from '../utils/formatter';
import { sendTextMessage, sendError } from '../utils/messageHelper';
import { createPaymentLink, generateOrderCode } from '../services/payos';
import global from '../global';
import QRCode from 'qrcode';
import path from "path";

const rentCommand = {
    name: 'rent',
    aliases: ['thu√™', 'thubot', 'hire'],
    description: 'Thu√™ bot cho nh√≥m',
    usage: '/rent [t√™n_g√≥i]',
    requiredPermission: UserPermission.MANAGER,

    execute: async (params: CommandParams): Promise<void> => {
        const { args, groupId, isGroup, userId } = params;

        // Check if in a group
        if (!isGroup || !groupId) {
            await sendError(
                'L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m',
                userId,
                false
            );
            return;
        }

        // If no arguments, show rental packages
        if (args.length === 0) {
            const rentMenu = formatRentMenu(SUBSCRIPTION_PACKAGES);
            await sendTextMessage(rentMenu, groupId, true);
            return;
        }

        // Get package type
        const packageType = args[0].toLowerCase();

        // Check if package exists
        if (!Object.keys(SUBSCRIPTION_PACKAGES).includes(packageType)) {
            await sendError(
                `G√≥i "${packageType}" kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng /rent ƒë·ªÉ xem danh s√°ch g√≥i.`,
                groupId,
                true
            );
            return;
        }

        try {
            // Get package info
            const packageInfo = SUBSCRIPTION_PACKAGES[packageType as PackageType];

            // Check if the package exists
            if (!packageInfo) {
                await sendError(
                    `G√≥i "${packageType}" kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng /rent ƒë·ªÉ xem danh s√°ch g√≥i.`,
                    groupId,
                    true
                );
                return;
            }

            // Show confirmation info
            const confirmMessage = `üõí TH√îNG TIN THU√ä BOT\n\n` +
                formatPackageInfo(packageInfo) +
                `\nüí∞ ƒê·ªÉ ti·∫øp t·ª•c thanh to√°n, vui l√≤ng g√µ:\n` +
                `/rent ${packageType} confirm`;

            // If user confirms payment
            if (args.length > 1 && args[1].toLowerCase() === 'confirm') {
                // Get or create group
                const group = await groupService().findGroupById(groupId);

                if (!group) {
                    // Create group if not exists
                    await groupService().createOrUpdateGroup(groupId, "Nh√≥m Zalo");
                }

                // Generate order code
                const orderCode = generateOrderCode();

                // Create payment record
                const payment = await paymentService().createPayment(
                    userId,
                    groupId,
                    packageInfo.price,
                    packageType as PackageType,
                    orderCode,
                    `Thu√™ bot ZCA - ${packageInfo.name} - Nh√≥m ${groupId}`
                );

                if (!payment) {
                    throw new Error('Kh√¥ng th·ªÉ t·∫°o thanh to√°n trong c∆° s·ªü d·ªØ li·ªáu');
                }

                // Create payment link with PayOS
                const isExtend = group?.isActive ?? false;
                const actionText = isExtend ? "Gia h·∫°n bot" : "Thu√™ bot";
                const description = `${packageInfo.days} ng√†y - Nh√≥m: ${group?.name || groupId}`;
                console.log(description);
                const paymentLinkResponse = await createPaymentLink(
                    packageInfo.price,
                    orderCode,
                    description
                );

                // Send payment information
                const paymentMessage = `üí≥ THANH TO√ÅN G√ìI ${packageInfo.name.toUpperCase()}\n\n` +
                    `üí≤ S·ªë ti·ªÅn: ${packageInfo.price.toLocaleString('vi-VN')}ƒë\n` +
                    `üìù N·ªôi dung: Thu√™ bot ZCA - ${packageInfo.name}\n` +
                    `üîó Link thanh to√°n: ${paymentLinkResponse.data.checkoutUrl}\n\n` +
                    `üì± Vui l√≤ng qu√©t m√£ QR ho·∫∑c truy c·∫≠p link tr√™n ƒë·ªÉ thanh to√°n.\n` +
                    `‚è≥ Link c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.\n\n` +
                    `üîç L∆∞u √Ω: Sau khi thanh to√°n th√†nh c√¥ng, bot s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t trong v√≤ng 1-2 ph√∫t.`;

                await sendTextMessage(paymentMessage, groupId, true);

                // Send QR code if available
                if (paymentLinkResponse.data.qrCode && global.bot) {
                    try {
                        const cacheDir = path.resolve(__dirname,'./cache');
                        const qrImagePath = path.join(cacheDir, 'qrCode.png');
                        await QRCode.toFile(qrImagePath, paymentLinkResponse.data.qrCode);

                        await global.bot.sendMessage({
                            msg: "M√£ QR thanh to√°n PayOS:",
                            attachments: [path.resolve(qrImagePath)]
                        }, groupId, true);
                    } catch (qrError) {
                        global.logger.error(`L·ªói g·ª≠i m√£ QR: ${qrError}`);
                    }
                }
            } else {
                // Send confirmation message
                await sendTextMessage(confirmMessage, groupId, true);
            }
        } catch (error: any) {
            await sendError(
                `ƒê√£ x·∫£y ra l·ªói khi t·∫°o thanh to√°n: ${error.message}`,
                groupId,
                true
            );
        }
    }
};

export default rentCommand;