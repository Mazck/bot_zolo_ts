/**
 * File: src/commands/rent.ts
 * M√¥ t·∫£: L·ªánh thu√™ bot
 */

import { CommandParams } from '../types';
import { SUBSCRIPTION_PACKAGES, PackageType, UserPermission } from '../config';
import { initializeSubscription } from '../services/subscription';
import { formatRentMenu, formatPackageInfo } from '../utils/formatter';
import { sendTextMessage, sendError } from '../utils/messageHelper';

const rentCommand = {
    name: 'rent',
    aliases: ['thu√™', 'thubot', 'hire'],
    description: 'Thu√™ bot cho nh√≥m',
    usage: '/rent [t√™n_g√≥i]',
    requiredPermission: UserPermission.MANAGER,

    execute: async (params: CommandParams) => {
        const { args, groupId, isGroup, userId } = params;

        // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i nh√≥m
        if (!isGroup || !groupId) {
            await sendError(
                'L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m',
                userId,
                false
            );
            return;
        }

        // Hi·ªÉn th·ªã menu thu√™ n·∫øu kh√¥ng c√≥ tham s·ªë
        if (args.length === 0) {
            const rentMenu = formatRentMenu(SUBSCRIPTION_PACKAGES);
            await sendTextMessage(rentMenu, groupId, true);
            return;
        }

        // L·∫•y t√™n g√≥i
        const packageType = args[0].toLowerCase();

        // Ki·ªÉm tra g√≥i c√≥ t·ªìn t·∫°i kh√¥ng
        if (!Object.keys(SUBSCRIPTION_PACKAGES).includes(packageType)) {
            await sendError(
                `G√≥i "${packageType}" kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng /rent ƒë·ªÉ xem danh s√°ch g√≥i.`,
                groupId,
                true
            );
            return;
        }

        try {
            // Kh·ªüi t·∫°o qu√° tr√¨nh thu√™
            const packageInfo = SUBSCRIPTION_PACKAGES[packageType];

            // Hi·ªÉn th·ªã th√¥ng tin x√°c nh·∫≠n
            const confirmMessage = `üõí TH√îNG TIN THU√ä BOT\n\n` +
                formatPackageInfo(packageInfo) +
                `\nüí∞ ƒê·ªÉ ti·∫øp t·ª•c thanh to√°n, vui l√≤ng g√µ:\n` +
                `/rent ${packageType} confirm`;

            // N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n thanh to√°n
            if (args.length > 1 && args[1].toLowerCase() === 'confirm') {
                // Kh·ªüi t·∫°o thanh to√°n
                const payment = await initializeSubscription(
                    userId,
                    groupId,
                    packageType as PackageType
                );

                // G·ª≠i th√¥ng tin thanh to√°n
                const paymentMessage = `üí≥ THANH TO√ÅN G√ìI ${packageInfo.name.toUpperCase()}\n\n` +
                    `üí≤ S·ªë ti·ªÅn: ${packageInfo.price.toLocaleString('vi-VN')}ƒë\n` +
                    `üìù N·ªôi dung: Thu√™ bot ZCA - ${packageInfo.name}\n` +
                    `üîó Link thanh to√°n: ${payment.paymentLink}\n\n` +
                    `üì± Vui l√≤ng qu√©t m√£ QR ho·∫∑c truy c·∫≠p link tr√™n ƒë·ªÉ thanh to√°n.\n` +
                    `‚è≥ Link c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.\n\n` +
                    `üîç L∆∞u √Ω: Sau khi thanh to√°n th√†nh c√¥ng, bot s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t trong v√≤ng 1-2 ph√∫t.`;

                // G·ª≠i tin nh·∫Øn th√¥ng b√°o thanh to√°n
                await sendTextMessage(paymentMessage, groupId, true);

                // G·ª≠i m√£ QR cho ng∆∞·ªùi d√πng n·∫øu c√≥
                if (payment.qrCode) {
                    if (global.bot) {
                        try {
                            // L∆∞u QR code th√†nh file t·∫°m v√† g·ª≠i (n·∫øu c·∫ßn)
                            // ·ªû ƒë√¢y ch√∫ng ta ƒëang gi·∫£ ƒë·ªãnh r·∫±ng PayOS tr·∫£ v·ªÅ URL c·ªßa QR code
                            // Trong th·ª±c t·∫ø, b·∫°n c·∫ßn ki·ªÉm tra d·ªØ li·ªáu qrCode v√† x·ª≠ l√Ω ph√π h·ª£p
                            await global.bot.sendMessage({
                                msg: "M√£ QR thanh to√°n PayOS:",
                                // Gi·∫£ s·ª≠ c√≥ method sendImage trong ZCA-JS API ho·∫∑c b·∫°n c·∫ßn tri·ªÉn khai n√≥
                                // attachments: [payment.qrCode]
                            }, groupId, true);
                        } catch (qrError) {
                            global.logger.error(`L·ªói g·ª≠i m√£ QR: ${qrError}`);
                        }
                    }
                }
            } else {
                // G·ª≠i th√¥ng tin x√°c nh·∫≠n
                await sendTextMessage(confirmMessage, groupId, true);
            }
        } catch (error: any) {
            await sendError(
                `ƒê√£ x·∫£y ra l·ªói khi t·∫°o thanh to√°n: ${error.message}`,
                groupId,
                true
            );
        }
    }
};

export default rentCommand;