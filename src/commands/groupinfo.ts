import { CommandParams } from '../types';
import { UserPermission } from '../config'; // Import UserPermission
import { sendTextMessage, sendError } from '../utils/messageHelper';
import { findGroupById } from '../database/models/group';
import global from '../global';

const groupinfoCommand = {
    name: 'groupinfo',
    aliases: ['group', 'nh√≥m', 'th√¥ng-tin-nh√≥m'],
    description: 'Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ nh√≥m',
    usage: '/groupinfo',
    requiredPermission: UserPermission.USER,  // Use enum instead of string

    execute: async (params: CommandParams) => {
        const { threadId, isGroup, userId } = params;

        // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i nh√≥m
        if (!isGroup) {
            await sendError(
                'L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m',
                userId,
                false
            );
            return;
        }

        try {
            // L·∫•y th√¥ng tin nh√≥m t·ª´ Zalo API
            if (!global.bot) {
                await sendError(
                    'Bot kh√¥ng kh·∫£ d·ª•ng, vui l√≤ng th·ª≠ l·∫°i sau',
                    threadId,
                    true
                );
                return;
            }

            const zaloGroupInfo = await global.bot.getGroupInfo(threadId);

            // L·∫•y th√¥ng tin nh√≥m t·ª´ database
            const dbGroup = await findGroupById(threadId);

            // T·∫°o th√¥ng b√°o th√¥ng tin nh√≥m
            let infoMessage = `üìã TH√îNG TIN NH√ìM\n\n`;

            // Th√¥ng tin c∆° b·∫£n
            infoMessage += `‚ñ∂Ô∏è T√™n nh√≥m: ${zaloGroupInfo.name}\n`;
            infoMessage += `‚ñ∂Ô∏è ID nh√≥m: ${zaloGroupInfo.id}\n`;
            infoMessage += `‚ñ∂Ô∏è T·ªïng th√†nh vi√™n: ${zaloGroupInfo.totalParticipants}\n`;

            // Th√¥ng tin qu·∫£n tr·ªã vi√™n
            if (zaloGroupInfo.adminIds && zaloGroupInfo.adminIds.length > 0) {
                infoMessage += `‚ñ∂Ô∏è S·ªë ph√≥ nh√≥m: ${zaloGroupInfo.adminIds.length}\n`;
            }

            if (zaloGroupInfo.ownerIds && zaloGroupInfo.ownerIds.length > 0) {
                infoMessage += `‚ñ∂Ô∏è Tr∆∞·ªüng nh√≥m: ${zaloGroupInfo.ownerIds.length} ng∆∞·ªùi\n`;
            }

            // Th√¥ng tin tr·∫°ng th√°i bot
            if (dbGroup) {
                infoMessage += `\nüìä TR·∫†NG TH√ÅI BOT\n`;
                infoMessage += `‚ñ∂Ô∏è Tr·∫°ng th√°i: ${dbGroup.isActive ? '‚úÖ ƒê√£ k√≠ch ho·∫°t' : '‚ùå Ch∆∞a k√≠ch ho·∫°t'}\n`;

                if (dbGroup.isActive && dbGroup.expiresAt) {
                    infoMessage += `‚ñ∂Ô∏è H·∫øt h·∫°n: ${dbGroup.expiresAt.toLocaleString('vi-VN')}\n`;

                    const now = new Date();
                    if (dbGroup.expiresAt > now) {
                        // T√≠nh s·ªë ng√†y c√≤n l·∫°i
                        const daysLeft = Math.ceil((dbGroup.expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
                        infoMessage += `‚ñ∂Ô∏è C√≤n l·∫°i: ${daysLeft} ng√†y\n`;
                    } else {
                        infoMessage += `‚ñ∂Ô∏è Tr·∫°ng th√°i: ‚ö†Ô∏è ƒê√É H·∫æT H·∫†N\n`;
                    }
                }
            } else {
                infoMessage += `\n‚ö†Ô∏è Nh√≥m ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu c·ªßa bot.`;
            }

            // G·ª≠i th√¥ng b√°o
            await sendTextMessage(infoMessage, threadId, true);

        } catch (error) {
            await sendError(
                `ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin nh√≥m: ${error.message}`,
                threadId,
                true
            );
        }
    }
};

export default groupinfoCommand;