import { activationCheck } from './activationCheck';
import { permissionCheck } from './permissionCheck';
import { antiSpamCheck } from './antiSpam';
import { formatError } from '../utils/formatter';
import { sendTextMessage, sendError } from '../utils/messageHelper';
import global from '../global';

/**
 * Middleware x·ª≠ l√Ω l·ªánh t·ªïng h·ª£p
 * Th·ª±c hi·ªán c√°c ki·ªÉm tra theo th·ª© t·ª±:
 * 1. Ch·ªëng spam
 * 2. K√≠ch ho·∫°t nh√≥m
 * 3. Quy·ªÅn ng∆∞·ªùi d√πng
 * 
 * @param params Object ch·ª©a th√¥ng tin l·ªánh v√† ng∆∞·ªùi d√πng
 * @param execute H√†m th·ª±c thi khi t·∫•t c·∫£ c√°c ki·ªÉm tra ƒë·ªÅu th√†nh c√¥ng
 */
export async function commandMiddleware(params, execute) {
    const { userId, groupId, isGroup, command } = params;

    // Ki·ªÉm tra tham s·ªë b·∫Øt bu·ªôc
    if (!userId || !command) {
        global.logger.error('Thi·∫øu tham s·ªë b·∫Øt bu·ªôc cho middleware');
        return;
    }

    try {
        // 1. Ki·ªÉm tra ch·ªëng spam
        const isNotSpamming = await antiSpamCheck(userId, command);
        if (!isNotSpamming) {
            await sendError(
                'B·∫°n ƒëang g·ª≠i l·ªánh qu√° nhanh. Vui l√≤ng th·ª≠ l·∫°i sau.',
                isGroup && groupId ? groupId : userId,
                isGroup
            );
            return;
        }

        // 2. Ki·ªÉm tra k√≠ch ho·∫°t nh√≥m (ch·ªâ trong nh√≥m)
        if (isGroup && groupId) {
            const isActivated = await activationCheck(groupId);
            if (!isActivated) {
                // Nh√≥m ch∆∞a k√≠ch ho·∫°t, hi·ªÉn th·ªã th√¥ng tin thu√™ bot
                await sendRentInfo(groupId);
                return;
            }
        }

        // 3. Ki·ªÉm tra quy·ªÅn
        const hasPermission = await permissionCheck(userId, command.requiredPermission);
        if (!hasPermission) {
            await sendError(
                `B·∫°n kh√¥ng c√≥ quy·ªÅn ${command.requiredPermission} ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.`,
                isGroup && groupId ? groupId : userId,
                isGroup
            );
            return;
        }

        // Th·ª±c thi l·ªánh sau khi ƒë√£ qua t·∫•t c·∫£ c√°c ki·ªÉm tra
        await execute();

    } catch (error) {
        global.logger.error(`L·ªói trong command middleware: ${error}`);
        await sendError(
            'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.',
            isGroup && groupId ? groupId : userId,
            isGroup
        );
    }
}

/**
 * Hi·ªÉn th·ªã th√¥ng tin thu√™ bot
 * @param groupId ID nh√≥m
 */
async function sendRentInfo(groupId) {
    try {
        const message = `üì¢ Nh√≥m ch∆∞a k√≠ch ho·∫°t d·ªãch v·ª•\n\n` +
            `ƒê·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa bot, nh√≥m c·∫ßn ƒë∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc.\n` +
            `S·ª≠ d·ª•ng l·ªánh /rent ƒë·ªÉ xem th√¥ng tin v·ªÅ c√°c g√≥i d·ªãch v·ª•.\n\n` +
            `üîπ G√≥i C∆° b·∫£n: 99.000ƒë/30 ng√†y\n` +
            `üîπ G√≥i Premium: 249.000ƒë/90 ng√†y\n` +
            `üîπ G√≥i VIP: 899.000ƒë/365 ng√†y`;

        await sendTextMessage(message, groupId, true);
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng tin thu√™: ${error}`);
    }
}