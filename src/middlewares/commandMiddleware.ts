import { activationCheck } from './activationCheck';
import { permissionCheck } from './permissionCheck';
import { antiSpamCheck } from './antiSpam';
import { sendTextMessage } from '../utils/messageHelper';
import global from '../global';
import { ANTI_SPAM_CONFIG } from '../config';

/**
 * Middleware for processing commands
 * Performs checks in the following order:
 * 1. Anti-spam check
 * 2. Group activation check
 * 3. User permission check
 * 
 * @param params Command parameters (userId, groupId, command, etc.)
 * @param execute Function to execute if all checks pass
 */
export async function commandMiddleware(
    params: {
        userId: string;
        groupId?: string;
        isGroup: boolean;
        command: any;
        message?: any;
    },
    execute: () => Promise<void>
): Promise<void> {
    const { userId, groupId, isGroup, command, message } = params;

    // Validate required parameters
    if (!userId || !command) {
        global.logger.error('Missing required parameters for command middleware');
        return;
    }

    try {
        // Log command attempt for debugging
        global.logger.debug(`User ${userId} attempting command: ${command.name} in ${isGroup ? 'group ' + groupId : 'private chat'}`);

        // 1. Anti-spam check
        const notSpamming = await antiSpamCheck(userId, command);
        if (!notSpamming) {
            await sendTextMessage(
                'B·∫°n ƒëang g·ª≠i l·ªánh qu√° nhanh. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.',
                isGroup && groupId ? groupId : userId,
                isGroup
            );
            return;
        }

        // 2. Group activation check (only for group messages)
        if (isGroup && groupId) {
            const isActivated = await activationCheck(groupId);
            if (!isActivated) {
                if (!ANTI_SPAM_CONFIG.excludedCommands.includes(command.name)) {
                    await sendRentInfo(groupId);
                    return;
                }
            }
        }

        // 3. Permission check
        const hasPermission = await permissionCheck(userId, command.requiredPermission);
        if (!hasPermission) {
            await sendTextMessage(
                `B·∫°n kh√¥ng c√≥ quy·ªÅn ${command.requiredPermission} ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.`,
                isGroup && groupId ? groupId : userId,
                isGroup
            );
            return;
        }

        // All checks passed - execute command
        global.logger.debug(`Command ${command.name} passed all checks for user ${userId}`);
        await execute();

    } catch (error) {
        global.logger.error(`Error in command middleware: ${error}`);
        await sendTextMessage(
            'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.',
            isGroup && groupId ? groupId : userId,
            isGroup
        );
    }
}

/**
 * Sends information about renting the bot when a group isn't activated
 */
async function sendRentInfo(groupId: string): Promise<void> {
    try {
        const message = `üì¢ Nh√≥m ch∆∞a k√≠ch ho·∫°t d·ªãch v·ª•\n\n` +
            `ƒê·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa bot, nh√≥m c·∫ßn ƒë∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc.\n` +
            `S·ª≠ d·ª•ng l·ªánh /rent ƒë·ªÉ xem th√¥ng tin v·ªÅ c√°c g√≥i d·ªãch v·ª•.\n\n` +
            `üîπ G√≥i C∆° b·∫£n: 99.000ƒë/30 ng√†y\n` +
            `üîπ G√≥i Premium: 249.000ƒë/90 ng√†y\n` +
            `üîπ G√≥i VIP: 899.000ƒë/365 ng√†y`;

        await sendTextMessage(message, groupId, true);
    } catch (error) {
        global.logger.error(`Error sending rent info: ${error}`);
    }
}