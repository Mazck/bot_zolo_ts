/**
 * File: src/events/groupHandler.ts
 * M√¥ t·∫£: X·ª≠ l√Ω s·ª± ki·ªán nh√≥m
 */

import { GroupEventType } from 'zca-js';
import { createOrUpdateUser } from '../database/models/user';
import { createOrUpdateGroup } from '../database/models/group';
import { BOT_CONFIG } from '../config';
import { sendTextMessage, sendSuccess } from '../utils/messageHelper';
import global from '../global';

/**
 * Thi·∫øt l·∫≠p tr√¨nh l·∫Øng nghe s·ª± ki·ªán nh√≥m
 */
export function setupGroupEventListener() {
    if (!global.bot) {
        global.logger.error('Bot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, kh√¥ng th·ªÉ thi·∫øt l·∫≠p group event listener');
        return;
    }

    global.bot.listener.on('group_event', async (data) => {
        try {
            const groupId = data.threadId;

            // C·∫≠p nh·∫≠t th√¥ng tin nh√≥m
            try {
                // Check that global.bot is still available
                if (global.bot) {
                    const groupInfo = await global.bot.getGroupInfo(groupId);
                    await createOrUpdateGroup(groupId, groupInfo.name);
                } else {
                    global.logger.error('Bot not available when trying to update group info');
                    return;
                }
            } catch (error) {
                global.logger.error(`L·ªói c·∫≠p nh·∫≠t th√¥ng tin nh√≥m: ${error}`);
            }

            // X·ª≠ l√Ω c√°c lo·∫°i s·ª± ki·ªán nh√≥m
            switch (data.type) {
                case GroupEventType.JOIN:
                    await handleJoinEvent(data, groupId);
                    break;

                case GroupEventType.LEAVE:
                    await handleLeaveEvent(data, groupId);
                    break;

                case GroupEventType.UPDATE:
                    await handleUpdateEvent(data, groupId);
                    break;

                case GroupEventType.ADD_ADMIN:
                    await handleAddAdminEvent(data, groupId);
                    break;

                case GroupEventType.REMOVE_ADMIN:
                    await handleRemoveAdminEvent(data, groupId);
                    break;

                case GroupEventType.REMOVE_MEMBER:
                    await handleRemoveMemberEvent(data, groupId);
                    break;

                case GroupEventType.BLOCK_MEMBER:
                    await handleBlockMemberEvent(data, groupId);
                    break;

                case GroupEventType.JOIN_REQUEST:
                    await handleJoinRequestEvent(data, groupId);
                    break;

                default:
                    // Ghi log c√°c s·ª± ki·ªán kh√°c
                    global.logger.info(`Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán nh√≥m kh√°c: ${data.type} - ${JSON.stringify(data.data)}`);
                    break;
            }

        } catch (error) {
            global.logger.error(`L·ªói x·ª≠ l√Ω s·ª± ki·ªán nh√≥m: ${error}`);
        }
    });

    global.logger.info('ƒê√£ thi·∫øt l·∫≠p group_event listener');
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng tham gia nh√≥m
 */
async function handleJoinEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleJoinEvent');
            return;
        }

        for (const userId of data.data.userIDs) {
            // Ki·ªÉm tra n·∫øu ng∆∞·ªùi tham gia l√† bot
            if (global.bot.id === userId) {
                // Bot v·ª´a ƒë∆∞·ª£c th√™m v√†o nh√≥m
                await sendTextMessage(
                    `üëã Xin ch√†o! T√¥i l√† ${BOT_CONFIG.botName} ü§ñ\n\n` +
                    `C·∫£m ∆°n ƒë√£ m·ªùi t√¥i v√†o nh√≥m. ƒê·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa bot, ` +
                    `nh√≥m c·∫ßn k√≠ch ho·∫°t d·ªãch v·ª• tr∆∞·ªõc.\n\n` +
                    `G√µ "${BOT_CONFIG.prefix}rent" ƒë·ªÉ xem th√¥ng tin c√°c g√≥i d·ªãch v·ª• v√† thu√™ bot.`,
                    groupId,
                    true
                );
                continue;
            }

            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            const userInfo = await global.bot.getUserInfo(userId);
            await createOrUpdateUser(userId, userInfo.displayName);

            // G·ª≠i l·ªùi ch√†o
            await sendTextMessage(
                `üëã Ch√†o m·ª´ng ${userInfo.displayName} ƒë√£ tham gia nh√≥m!`,
                groupId,
                true
            );
        }
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω th√†nh vi√™n m·ªõi tham gia: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng r·ªùi nh√≥m
 */
async function handleLeaveEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleLeaveEvent');
            return;
        }

        for (const userId of data.data.userIDs) {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            const userInfo = await global.bot.getUserInfo(userId);

            // G·ª≠i th√¥ng b√°o
            await sendTextMessage(
                `üëã ${userInfo.displayName} ƒë√£ r·ªùi kh·ªèi nh√≥m.`,
                groupId,
                true
            );
        }
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω th√†nh vi√™n r·ªùi nh√≥m: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t nh√≥m
 */
async function handleUpdateEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleUpdateEvent');
            return;
        }

        // Ki·ªÉm tra n·∫øu l√† c·∫≠p nh·∫≠t t√™n nh√≥m
        if (data.data.update_type === 'name') {
            // C·∫≠p nh·∫≠t t√™n nh√≥m trong DB
            const groupInfo = await global.bot.getGroupInfo(groupId);
            await createOrUpdateGroup(groupId, groupInfo.name);

            // G·ª≠i th√¥ng b√°o
            await sendTextMessage(
                `üìù T√™n nh√≥m ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh "${groupInfo.name}".`,
                groupId,
                true
            );
        }
        // Ki·ªÉm tra n·∫øu l√† c·∫≠p nh·∫≠t ·∫£nh nh√≥m
        else if (data.data.update_type === 'avatar') {
            await sendTextMessage(
                `üñºÔ∏è ·∫¢nh ƒë·∫°i di·ªán nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`,
                groupId,
                true
            );
        }
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω c·∫≠p nh·∫≠t nh√≥m: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán th√™m qu·∫£n tr·ªã vi√™n
 */
async function handleAddAdminEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleAddAdminEvent');
            return;
        }

        const userInfo = await global.bot.getUserInfo(data.data.userID);
        if (data.data.adminType === 1) { // Tr∆∞·ªüng nh√≥m
            await sendTextMessage(
                `üéñÔ∏è ${userInfo.displayName} ƒë√£ tr·ªü th√†nh tr∆∞·ªüng nh√≥m.`,
                groupId,
                true
            );
        } else { // Ph√≥ nh√≥m
            await sendTextMessage(
                `üëÆ ${userInfo.displayName} ƒë√£ tr·ªü th√†nh ph√≥ nh√≥m.`,
                groupId,
                true
            );
        }

        // C·∫≠p nh·∫≠t quy·ªÅn trong DB n·∫øu c·∫ßn
        await createOrUpdateUser(data.data.userID, userInfo.displayName, 'manager');

    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω th√™m qu·∫£n tr·ªã vi√™n: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán g·ª° qu·∫£n tr·ªã vi√™n
 */
async function handleRemoveAdminEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleRemoveAdminEvent');
            return;
        }

        const userInfo = await global.bot.getUserInfo(data.data.userID);
        await sendTextMessage(
            `üëã ${userInfo.displayName} ƒë√£ b·ªã g·ª° quy·ªÅn ph√≥ nh√≥m.`,
            groupId,
            true
        );

        // C·∫≠p nh·∫≠t quy·ªÅn trong DB n·∫øu c·∫ßn
        await createOrUpdateUser(data.data.userID, userInfo.displayName, 'user');

    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω g·ª° qu·∫£n tr·ªã vi√™n: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán x√≥a th√†nh vi√™n
 */
async function handleRemoveMemberEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleRemoveMemberEvent');
            return;
        }

        for (const userId of data.data.userIDs) {
            const userInfo = await global.bot.getUserInfo(userId);
            await sendTextMessage(
                `üö´ ${userInfo.displayName} ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m.`,
                groupId,
                true
            );
        }
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω x√≥a th√†nh vi√™n: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán ch·∫∑n th√†nh vi√™n
 */
async function handleBlockMemberEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleBlockMemberEvent');
            return;
        }

        const userInfo = await global.bot.getUserInfo(data.data.userID);
        await sendTextMessage(
            `üîí ${userInfo.displayName} ƒë√£ b·ªã ch·∫∑n kh·ªèi nh√≥m.`,
            groupId,
            true
        );
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω ch·∫∑n th√†nh vi√™n: ${error}`);
    }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán y√™u c·∫ßu tham gia
 */
async function handleJoinRequestEvent(data, groupId) {
    try {
        // Check if bot is available
        if (!global.bot) {
            global.logger.error('Bot not available in handleJoinRequestEvent');
            return;
        }

        const userInfo = await global.bot.getUserInfo(data.data.userID);

        // Th√¥ng b√°o cho qu·∫£n tr·ªã vi√™n nh√≥m
        await sendTextMessage(
            `üì© ${userInfo.displayName} ƒë√£ y√™u c·∫ßu tham gia nh√≥m.`,
            groupId,
            true
        );
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω y√™u c·∫ßu tham gia: ${error}`);
    }
}