import { SUBSCRIPTION_PACKAGES, PackageType } from '../config';
import { createPayment, updatePaymentStatus } from '../database/models/payment';
import { activateGroup, deactivateGroup, getExpiredGroups, findGroupById } from '../database/models/group';
import { createPaymentLink, generateOrderCode } from './payos';
import { sendTextMessage } from '../utils/messageHelper';
import { Package } from '../types';
import global from '../global';

/**
 * Kh·ªüi t·∫°o qu√° tr√¨nh thu√™ bot
 * @param userId ID ng∆∞·ªùi d√πng
 * @param groupId ID nh√≥m
 * @param packageType Lo·∫°i g√≥i
 * @returns Object ch·ª©a paymentId v√† link thanh to√°n
 */
export async function initializeSubscription(
    userId: string,
    groupId: string,
    packageType: PackageType
): Promise<{ paymentId: string; paymentLink: string; qrCode: string }> {
    try {
        // Ki·ªÉm tra g√≥i c√≥ t·ªìn t·∫°i kh√¥ng
        if (!Object.keys(SUBSCRIPTION_PACKAGES).includes(packageType)) {
            throw new Error(`G√≥i ${packageType} kh√¥ng t·ªìn t·∫°i`);
        }

        const packageInfo = SUBSCRIPTION_PACKAGES[packageType] as Package;

        // Ki·ªÉm tra th√¥ng tin nh√≥m
        const group = await findGroupById(groupId);

        if (!group) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√≥m');
        }

        // T·∫°o m√£ ƒë∆°n h√†ng
        const orderCode = generateOrderCode();

        // T·∫°o thanh to√°n trong DB
        const payment = await createPayment(
            userId,
            groupId,
            packageInfo.price,
            packageType,
            orderCode
        );

        if (!payment) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o thanh to√°n trong c∆° s·ªü d·ªØ li·ªáu');
        }

        // Chu·∫©n b·ªã m√¥ t·∫£ thanh to√°n
        const isExtend = group.isActive;
        const actionText = isExtend ? "Gia h·∫°n bot" : "Thu√™ bot";
        const description = `${actionText} ZCA - ${packageInfo.name} - ${packageInfo.days} ng√†y - Nh√≥m: ${group.name}`;

        // T·∫°o link thanh to√°n qua PayOS
        const paymentLinkResponse = await createPaymentLink(
            packageInfo.price,
            orderCode,
            description
        );

        // Ghi log th√¥ng tin t·∫°o thanh to√°n
        global.logger.info(`ƒê√£ t·∫°o thanh to√°n: ${packageType}, S·ªë ti·ªÅn: ${packageInfo.price}, Order: ${orderCode}`);

        // Tr·∫£ v·ªÅ th√¥ng tin thanh to√°n
        return {
            paymentId: payment.id,
            paymentLink: paymentLinkResponse.data.checkoutUrl,
            qrCode: paymentLinkResponse.data.qrCode
        };
    } catch (error) {
        global.logger.error(`L·ªói kh·ªüi t·∫°o thu√™ bot: ${error}`);
        throw error;
    }
}

/**
 * X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
 * @param paymentId ID thanh to√°n
 * @param transactionId ID giao d·ªãch PayOS
 * @returns true n·∫øu x·ª≠ l√Ω th√†nh c√¥ng, false n·∫øu kh√¥ng
 */
export async function processSuccessfulPayment(
    paymentId: string,
    transactionId: string
): Promise<boolean> {
    try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        const payment = await updatePaymentStatus(
            paymentId,
            'completed',
            transactionId
        );

        if (!payment) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y thanh to√°n v·ªõi ID: ${paymentId}`);
        }

        // L·∫•y th√¥ng tin g√≥i
        const packageInfo = SUBSCRIPTION_PACKAGES[payment.packageType];

        if (!packageInfo) {
            throw new Error(`Kh√¥ng t√¨m th·∫•y th√¥ng tin g√≥i: ${payment.packageType}`);
        }

        // K√≠ch ho·∫°t nh√≥m
        const activatedGroup = await activateGroup(payment.groupId, packageInfo.days);

        if (!activatedGroup) {
            throw new Error(`Kh√¥ng th·ªÉ k√≠ch ho·∫°t nh√≥m v·ªõi ID: ${payment.groupId}`);
        }

        // G·ª≠i th√¥ng b√°o
        if (global.bot) {
            const isExtended = activatedGroup.activatedAt && (new Date().getTime() - activatedGroup.activatedAt.getTime() > 3600000);
            const actionText = isExtended ? "GIA H·∫†N" : "K√çCH HO·∫†T";

            const message = `üéâ ${actionText} TH√ÄNH C√îNG!\n\n` +
                `‚úÖ Nh√≥m ƒë√£ ƒë∆∞·ª£c ${isExtended ? "gia h·∫°n" : "k√≠ch ho·∫°t"} v·ªõi g√≥i ${packageInfo.name}.\n` +
                `‚úÖ Th·ªùi h·∫°n: ${packageInfo.days} ng√†y\n` +
                `‚úÖ H·∫øt h·∫°n: ${activatedGroup.expiresAt?.toLocaleString('vi-VN')}\n\n` +
                `üí∞ S·ªë ti·ªÅn: ${packageInfo.price.toLocaleString('vi-VN')}ƒë\n` +
                `üßæ M√£ giao d·ªãch: ${transactionId}\n\n` +
                `C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!`;

            await sendTextMessage(message, payment.groupId, true);
        }

        global.logger.info(`ƒê√£ k√≠ch ho·∫°t nh√≥m ${payment.groupId} th√†nh c√¥ng v·ªõi g√≥i ${payment.packageType}`);
        return true;
    } catch (error) {
        global.logger.error(`L·ªói x·ª≠ l√Ω thanh to√°n: ${error}`);
        return false;
    }
}

/**
 * Ki·ªÉm tra v√† v√¥ hi·ªáu h√≥a c√°c nh√≥m h·∫øt h·∫°n
 */
export async function checkExpiredGroups(): Promise<void> {
    try {
        const expiredGroups = await getExpiredGroups();

        if (expiredGroups.length === 0) {
            global.logger.info('Kh√¥ng c√≥ nh√≥m n√†o h·∫øt h·∫°n');
            return;
        }

        global.logger.info(`T√¨m th·∫•y ${expiredGroups.length} nh√≥m ƒë√£ h·∫øt h·∫°n`);

        for (const group of expiredGroups) {
            await deactivateGroup(group.id);

            // G·ª≠i th√¥ng b√°o
            if (global.bot) {
                const message = `‚ö†Ô∏è TH√îNG B√ÅO H·∫æT H·∫†N\n\n` +
                    `Th·ªùi h·∫°n thu√™ bot c·ªßa nh√≥m ƒë√£ k·∫øt th√∫c v√†o ${group.expiresAt?.toLocaleString('vi-VN')}.\n\n` +
                    `ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•, vui l√≤ng gia h·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh:\n` +
                    `- L·ªánh gia h·∫°n: ${process.env.BOT_PREFIX || '/'}extend [t√™n_g√≥i]\n` +
                    `- Xem c√°c g√≥i d·ªãch v·ª•: ${process.env.BOT_PREFIX || '/'}rent`;

                await sendTextMessage(message, group.id, true);
            }

            global.logger.info(`ƒê√£ v√¥ hi·ªáu h√≥a nh√≥m h·∫øt h·∫°n: ${group.id}`);
        }
    } catch (error) {
        global.logger.error(`L·ªói ki·ªÉm tra nh√≥m h·∫øt h·∫°n: ${error}`);
    }
}

/**
 * L·∫•y th√¥ng tin g√≥i theo lo·∫°i
 * @param packageType Lo·∫°i g√≥i
 * @returns Th√¥ng tin g√≥i ho·∫∑c null
 */
export function getPackageInfo(packageType: string): Package | null {
    if (!Object.keys(SUBSCRIPTION_PACKAGES).includes(packageType)) {
        return null;
    }

    return SUBSCRIPTION_PACKAGES[packageType];
}

/**
 * T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü gia h·∫°n cho nh√≥m s·∫Øp h·∫øt h·∫°n
 * @param daysBeforeExpiration S·ªë ng√†y tr∆∞·ªõc khi h·∫øt h·∫°n ƒë·ªÉ nh·∫Øc nh·ªü
 */
export async function sendExpirationReminders(daysBeforeExpiration: number = 3): Promise<void> {
    try {
        if (!global.db) return;

        const groupRepository = global.db.getRepository('groups');
        const now = new Date();

        // Import for TypeORM operators
        const { Between } = require('typeorm');

        // T√≠nh ng√†y h·∫øt h·∫°n trong kho·∫£ng c·∫ßn nh·∫Øc nh·ªü
        const startDate = new Date(now);
        startDate.setDate(now.getDate() + daysBeforeExpiration - 1);

        const endDate = new Date(now);
        endDate.setDate(now.getDate() + daysBeforeExpiration);

        // T√¨m nh√≥m s·∫Øp h·∫øt h·∫°n
        const groups = await groupRepository.find({
            where: {
                isActive: true,
                expiresAt: Between(startDate, endDate)
            }
        });

        // G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü
        for (const group of groups) {
            if (global.bot) {
                const daysLeft = Math.ceil((group.expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

                const message = `‚è∞ TH√îNG B√ÅO H·∫æT H·∫†N\n\n` +
                    `Th·ªùi h·∫°n thu√™ bot c·ªßa nh√≥m s·∫Ω k·∫øt th√∫c trong ${daysLeft} ng√†y (${group.expiresAt.toLocaleString('vi-VN')}).\n\n` +
                    `ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•, vui l√≤ng gia h·∫°n b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh:\n` +
                    `- L·ªánh gia h·∫°n: ${process.env.BOT_PREFIX || '/'}extend [t√™n_g√≥i]\n` +
                    `- Xem c√°c g√≥i d·ªãch v·ª•: ${process.env.BOT_PREFIX || '/'}rent`;

                await sendTextMessage(message, group.id, true);
                global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü h·∫øt h·∫°n cho nh√≥m: ${group.id}`);
            }
        }
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü h·∫øt h·∫°n: ${error}`);
    }
}