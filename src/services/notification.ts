import { TextStyle } from '../types';
import { sendTextMessage, sendStyledMessage, sendAttachmentMessage } from '../utils/messageHelper';
import { userService , groupService } from '../database/services';
import { createPaymentLink, generateOrderCode } from './payos';
import { formatCurrency } from '../utils/formatter';
import { SUBSCRIPTION_PACKAGES, PackageType } from '../config';
import crypto from 'crypto';
import global from '../global';
import { Package } from '../types';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { promises as fsPromises } from 'fs';

// Th∆∞ m·ª•c l∆∞u tr·ªØ QR code t·∫°m th·ªùi
const TMP_DIR = path.join(process.cwd(), 'tmp');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
if (!fs.existsSync(TMP_DIR)) {
    fs.mkdirSync(TMP_DIR, { recursive: true });
}

/**
 * L∆∞u QR code t·ª´ chu·ªói Base64
 * @param base64Data Chu·ªói Base64 c·ªßa QR code (t·ª´ PayOS)
 * @returns ƒê∆∞·ªùng d·∫´n ƒë·∫øn file QR code ƒë√£ l∆∞u
 */
async function saveQRCodeFromBase64(base64Data: string): Promise<string> {
    try {
        // T·∫°o t√™n file
        const fileName = `qr_${Date.now()}_${Math.random().toString(36).substring(2, 8)}.png`;
        const filePath = path.join(TMP_DIR, fileName);

        // Chuy·ªÉn ƒë·ªïi chu·ªói Base64 th√†nh buffer
        const base64Image = base64Data.split(';base64,').pop();
        if (!base64Image) {
            throw new Error('Chu·ªói Base64 kh√¥ng h·ª£p l·ªá');
        }

        const imageBuffer = Buffer.from(base64Image, 'base64');

        // L∆∞u file
        await fsPromises.writeFile(filePath, imageBuffer);

        return filePath;
    } catch (error) {
        global.logger.error(`L·ªói l∆∞u QR code t·ª´ Base64: ${error}`);
        return '';
    }
}

/**
 * T·∫°o QR code v·ªõi n·ªôi dung t√πy ch·ªânh (fallback n·∫øu kh√¥ng c√≥ QR t·ª´ PayOS)
 * @param content N·ªôi dung c·ªßa QR code
 * @param size K√≠ch th∆∞·ªõc QR code (m·∫∑c ƒë·ªãnh 300)
 * @returns ƒê∆∞·ªùng d·∫´n ƒë·∫øn file QR code ho·∫∑c null n·∫øu c√≥ l·ªói
 */
export async function generateQRCode(content: string, size: number = 300): Promise<string | null> {
    try {
        // M√£ h√≥a n·ªôi dung ƒë·ªÉ s·ª≠ d·ª•ng trong URL
        const encodedContent = encodeURIComponent(content);

        // S·ª≠ d·ª•ng API Google Charts ƒë·ªÉ t·∫°o QR code
        const qrUrl = `https://chart.googleapis.com/chart?cht=qr&chs=${size}x${size}&chl=${encodedContent}`;

        // T·∫°o t√™n file
        const fileName = `qr_${Date.now()}_${Math.random().toString(36).substring(2, 8)}.png`;
        const filePath = path.join(TMP_DIR, fileName);

        // T·∫£i QR code v·ªÅ
        const response = await axios({
            method: 'GET',
            url: qrUrl,
            responseType: 'stream'
        });

        // L∆∞u file
        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
            writer.on('finish', () => resolve(filePath));
            writer.on('error', reject);
        });
    } catch (error) {
        global.logger.error(`L·ªói t·∫°o QR code: ${error}`);
        return null;
    }
}

/**
 * T·∫°o m√£ thanh to√°n t√πy ch·ªânh
 * @param groupId ID nh√≥m
 * @param packageType Lo·∫°i g√≥i
 * @returns M√£ thanh to√°n
 */
export function generatePaymentCode(groupId: string, packageType: PackageType): string {
    const timestamp = Date.now();
    const secret = crypto.createHash('md5').update(`${groupId}-${timestamp}`).digest('hex').substring(0, 8);
    return `ZCA-${packageType.toUpperCase()}-${groupId.substring(0, 8)}-${secret}`;
}

/**
 * T·∫°o th√¥ng tin thanh to√°n v√† g·ª≠i th√¥ng b√°o
 * @param userId ID ng∆∞·ªùi d√πng thanh to√°n
 * @param groupId ID nh√≥m
 * @param packageType Lo·∫°i g√≥i d·ªãch v·ª•
 * @returns true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu kh√¥ng
 */
export async function sendPaymentNotification(
    userId: string,
    groupId: string,
    packageType: PackageType
): Promise<boolean> {
    try {
        // Ki·ªÉm tra nh√≥m v√† g√≥i d·ªãch v·ª•
        const group = await groupService().findGroupById(groupId);
        if (!group) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y nh√≥m: ${groupId}`);
            return false;
        }

        const packageInfo = SUBSCRIPTION_PACKAGES[packageType] as Package;
        if (!packageInfo) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª•: ${packageType}`);
            return false;
        }

        // Ki·ªÉm tra ng∆∞·ªùi d√πng
        const user = await userService().findUserById(userId);
        if (!user) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${userId}`);
            return false;
        }

        // T·∫°o m√£ thanh to√°n v√† orderCode
        const paymentCode = generatePaymentCode(groupId, packageType);
        const orderCode = generateOrderCode();

        // T·∫°o n·ªôi dung QR
        const qrContent = `ZCA Bot Payment
Group: ${group.name}
GroupID: ${groupId}
Package: ${packageInfo.name}
Amount: ${formatCurrency(packageInfo.price)}
Time: ${new Date().toISOString()}
Code: ${paymentCode}`;

        // T·∫°o th√¥ng tin chuy·ªÉn kho·∫£n v·ªõi PayOS
        const isExtend = group.isActive;
        const actionText = isExtend ? "Gia h·∫°n bot" : "Thu√™ bot";
        const description = `${actionText} ZCA - ${packageInfo.name} - Nh√≥m: ${group.name} - M√£: ${paymentCode}`;

        try {
            // T·∫°o link thanh to√°n t·ª´ PayOS ƒë·ªÉ l·∫•y QR code
            const paymentLinkData = await createPaymentLink(
                packageInfo.price,
                orderCode,
                description,
                user.id,
                '', // email
                '', // phone
            );

            // L∆∞u QR code t·ª´ PayOS
            let qrFilePath = '';
            if (paymentLinkData.data.qrCode) {
                qrFilePath = await saveQRCodeFromBase64(paymentLinkData.data.qrCode);
            }

            // N·∫øu kh√¥ng th·ªÉ l∆∞u QR code t·ª´ PayOS, t·∫°o QR code b·∫±ng th∆∞ vi·ªán
            if (!qrFilePath) {
                qrFilePath = await generateQRCode(qrContent) || '';
            }

            // T·∫°o th√¥ng b√°o thanh to√°n
            const paymentMessage = `üí∞ THANH TO√ÅN ${actionText.toUpperCase()} BOT\n\n` +
                `üë• Nh√≥m: ${group.name}\n` +
                `üì¶ G√≥i: ${packageInfo.name}\n` +
                `üí≤ S·ªë ti·ªÅn: ${formatCurrency(packageInfo.price)}\n` +
                `‚è±Ô∏è Th·ªùi h·∫°n: ${packageInfo.days} ng√†y\n\n` +
                `üîñ M√£ thanh to√°n: ${paymentCode}\n\n` +
                `üîó Link thanh to√°n: ${paymentLinkData.data.checkoutUrl}\n\n` +
                `üì± Ho·∫∑c qu√©t m√£ QR b√™n d∆∞·ªõi ƒë·ªÉ thanh to√°n\n` +
                `‚è≥ Link c√≥ hi·ªáu l·ª±c trong 24 gi·ªù`;

            // G·ª≠i tin nh·∫Øn th√¥ng b√°o thanh to√°n
            await sendTextMessage(paymentMessage, groupId, true);

            // G·ª≠i m√£ QR
            if (qrFilePath) {
                try {
                    await sendAttachmentMessage(
                        "üîç Qu√©t m√£ QR ƒë·ªÉ thanh to√°n ho·∫∑c s·ª≠ d·ª•ng link thanh to√°n",
                        groupId,
                        [qrFilePath],
                        true
                    );

                    // X√≥a file QR sau khi g·ª≠i
                    setTimeout(() => {
                        try {
                            fs.unlinkSync(qrFilePath);
                        } catch (e) {
                            global.logger.error(`L·ªói x√≥a file QR t·∫°m: ${e}`);
                        }
                    }, 5000);
                } catch (qrError) {
                    global.logger.error(`L·ªói g·ª≠i m√£ QR: ${qrError}`);
                }
            }

            global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o thanh to√°n cho nh√≥m: ${groupId}, g√≥i: ${packageType}`);
            return true;
        } catch (payosError) {
            global.logger.error(`L·ªói t·∫°o payment link t·ª´ PayOS: ${payosError}`);

            // Fallback: T·∫°o th√¥ng tin chuy·ªÉn kho·∫£n th·ªß c√¥ng n·∫øu PayOS l·ªói
            // T·∫°o QR code th·ªß c√¥ng
            const qrFilePath = await generateQRCode(qrContent);

            // T·∫°o th√¥ng b√°o chuy·ªÉn kho·∫£n th·ªß c√¥ng
            const manualPaymentMessage = `üí∞ THANH TO√ÅN ${actionText.toUpperCase()} BOT\n\n` +
                `üë• Nh√≥m: ${group.name}\n` +
                `üì¶ G√≥i: ${packageInfo.name}\n` +
                `üí≤ S·ªë ti·ªÅn: ${formatCurrency(packageInfo.price)}\n` +
                `‚è±Ô∏è Th·ªùi h·∫°n: ${packageInfo.days} ng√†y\n\n` +
                `üîñ M√£ thanh to√°n: ${paymentCode}\n\n` +
                `üè¶ Chuy·ªÉn kho·∫£n theo th√¥ng tin d∆∞·ªõi ƒë√¢y:\n` +
                `üë§ Ch·ªß t√†i kho·∫£n: NGUYEN VAN A\n` +
                `üí≥ S·ªë t√†i kho·∫£n: 1234567890\n` +
                `üèõÔ∏è Ng√¢n h√†ng: VIETCOMBANK\n` +
                `üìù N·ªôi dung: ${paymentCode}\n\n` +
                `‚ö†Ô∏è L∆∞u √Ω: Sau khi chuy·ªÉn kho·∫£n, vui l√≤ng g·ª≠i bi√™n lai v·ªõi n·ªôi dung /confirm ${paymentCode}`;

            // G·ª≠i tin nh·∫Øn th√¥ng b√°o thanh to√°n th·ªß c√¥ng
            await sendTextMessage(manualPaymentMessage, groupId, true);

            // G·ª≠i m√£ QR n·∫øu c√≥
            if (qrFilePath) {
                try {
                    await sendAttachmentMessage(
                        "üîç Qu√©t m√£ QR ƒë·ªÉ xem th√¥ng tin chuy·ªÉn kho·∫£n",
                        groupId,
                        [qrFilePath],
                        true
                    );

                    // X√≥a file QR sau khi g·ª≠i
                    setTimeout(() => {
                        try {
                            fs.unlinkSync(qrFilePath);
                        } catch (e) {
                            global.logger.error(`L·ªói x√≥a file QR t·∫°m: ${e}`);
                        }
                    }, 5000);
                } catch (qrError) {
                    global.logger.error(`L·ªói g·ª≠i m√£ QR: ${qrError}`);
                }
            }

            global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o thanh to√°n th·ªß c√¥ng cho nh√≥m: ${groupId}, g√≥i: ${packageType}`);
            return true;
        }
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng b√°o thanh to√°n: ${error}`);
        return false;
    }
}

/**
 * G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
 * @param groupId ID nh√≥m
 * @param packageType Lo·∫°i g√≥i
 * @param transactionId ID giao d·ªãch
 * @param expiryDate Ng√†y h·∫øt h·∫°n m·ªõi
 * @returns true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu kh√¥ng
 */
export async function sendSuccessNotification(
    groupId: string,
    packageType: PackageType,
    transactionId: string,
    expiryDate: Date
): Promise<boolean> {
    try {
        // Ki·ªÉm tra nh√≥m v√† g√≥i d·ªãch v·ª•
        const group = await groupService().findGroupById(groupId);
        if (!group) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y nh√≥m: ${groupId}`);
            return false;
        }

        const packageInfo = SUBSCRIPTION_PACKAGES[packageType] as Package;
        if (!packageInfo) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª•: ${packageType}`);
            return false;
        }

        // X√°c ƒë·ªãnh lo·∫°i h√†nh ƒë·ªông (thu√™ m·ªõi hay gia h·∫°n)
        const isExtend = group.activatedAt && (new Date().getTime() - group.activatedAt.getTime() > 3600000);
        const actionText = isExtend ? "GIA H·∫†N" : "K√çCH HO·∫†T";

        // T·∫°o th√¥ng b√°o th√†nh c√¥ng
        const message = `üéâ ${actionText} TH√ÄNH C√îNG!\n\n` +
            `‚úÖ Nh√≥m ƒë√£ ƒë∆∞·ª£c ${isExtend ? "gia h·∫°n" : "k√≠ch ho·∫°t"} v·ªõi g√≥i ${packageInfo.name}.\n` +
            `‚úÖ Th·ªùi h·∫°n: ${packageInfo.days} ng√†y\n` +
            `‚úÖ H·∫øt h·∫°n: ${expiryDate.toLocaleString('vi-VN')}\n\n` +
            `üí∞ S·ªë ti·ªÅn: ${formatCurrency(packageInfo.price)}\n` +
            `üßæ M√£ giao d·ªãch: ${transactionId}\n\n` +
            `üì¢ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• ZCA Bot!`;

        // T·∫°o style cho tin nh·∫Øn
        const styles = [
            {
                start: 0,
                len: message.length,
                style: TextStyle.Green
            }
        ];

        // G·ª≠i tin nh·∫Øn th√¥ng b√°o th√†nh c√¥ng
        await sendStyledMessage(message, groupId, styles, true);

        global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng cho nh√≥m: ${groupId}, g√≥i: ${packageType}`);
        return true;
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng b√°o th√†nh c√¥ng: ${error}`);
        return false;
    }
}

/**
 * G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü thanh to√°n
 * @param groupId ID nh√≥m
 * @param daysLeft S·ªë ng√†y c√≤n l·∫°i
 * @returns true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu kh√¥ng
 */
export async function sendReminderNotification(
    groupId: string,
    daysLeft: number
): Promise<boolean> {
    try {
        // Ki·ªÉm tra nh√≥m
        const group = await groupService().findGroupById(groupId);
        if (!group) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y nh√≥m: ${groupId}`);
            return false;
        }

        // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü
        const message = `‚è∞ TH√îNG B√ÅO S·∫ÆP H·∫æT H·∫†N\n\n` +
            `Th·ªùi h·∫°n s·ª≠ d·ª•ng bot c·ªßa nh√≥m "${group.name}" s·∫Ω k·∫øt th√∫c trong ${daysLeft} ng√†y ` +
            `(${group.expiresAt?.toLocaleString('vi-VN')}).\n\n` +
            `ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•, vui l√≤ng gia h·∫°n b·∫±ng l·ªánh:\n` +
            `- /extend ƒë·ªÉ xem c√°c g√≥i gia h·∫°n\n` +
            `- /extend [t√™n_g√≥i] ƒë·ªÉ gia h·∫°n g√≥i c·ª• th·ªÉ\n` +
            `- /transfer [t√™n_g√≥i] ƒë·ªÉ thanh to√°n b·∫±ng chuy·ªÉn kho·∫£n\n\n` +
            `üì¢ Gia h·∫°n ngay ƒë·ªÉ kh√¥ng b·ªã gi√°n ƒëo·∫°n d·ªãch v·ª•!`;

        // G·ª≠i tin nh·∫Øn nh·∫Øc nh·ªü
        await sendTextMessage(message, groupId, true);

        global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü cho nh√≥m: ${groupId}, c√≤n ${daysLeft} ng√†y`);
        return true;
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü: ${error}`);
        return false;
    }
}

/**
 * G·ª≠i th√¥ng b√°o h·∫øt h·∫°n
 * @param groupId ID nh√≥m
 * @returns true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu kh√¥ng
 */
export async function sendExpirationNotification(groupId: string): Promise<boolean> {
    try {
        // Ki·ªÉm tra nh√≥m
        const group = await groupService().findGroupById(groupId);
        if (!group) {
            global.logger.error(`Kh√¥ng t√¨m th·∫•y nh√≥m: ${groupId}`);
            return false;
        }

        // T·∫°o th√¥ng b√°o h·∫øt h·∫°n
        const message = `‚ö†Ô∏è TH√îNG B√ÅO H·∫æT H·∫†N\n\n` +
            `Th·ªùi h·∫°n s·ª≠ d·ª•ng bot c·ªßa nh√≥m "${group.name}" ƒë√£ k·∫øt th√∫c v√†o ${group.expiresAt?.toLocaleString('vi-VN')}.\n\n` +
            `Bot ƒë√£ b·ªã v√¥ hi·ªáu h√≥a trong nh√≥m n√†y. ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng, vui l√≤ng gia h·∫°n b·∫±ng l·ªánh:\n` +
            `- /extend ƒë·ªÉ xem c√°c g√≥i gia h·∫°n\n` +
            `- /extend [t√™n_g√≥i] ƒë·ªÉ gia h·∫°n g√≥i c·ª• th·ªÉ\n` +
            `- /transfer [t√™n_g√≥i] ƒë·ªÉ thanh to√°n b·∫±ng chuy·ªÉn kho·∫£n\n\n` +
            `üì¢ Gia h·∫°n ngay ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•!`;

        // G·ª≠i tin nh·∫Øn h·∫øt h·∫°n
        await sendTextMessage(message, groupId, true);

        global.logger.info(`ƒê√£ g·ª≠i th√¥ng b√°o h·∫øt h·∫°n cho nh√≥m: ${groupId}`);
        return true;
    } catch (error) {
        global.logger.error(`L·ªói g·ª≠i th√¥ng b√°o h·∫øt h·∫°n: ${error}`);
        return false;
    }
}

export default {
    generateQRCode,
    generatePaymentCode,
    sendPaymentNotification,
    sendSuccessNotification,
    sendReminderNotification,
    sendExpirationNotification
};